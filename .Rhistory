geom_segment(data = passes_to_plot, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "grey", arrow = arrow(length = unit(0.01, "npc"))) +
geom_segment(data = kmean_result, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "tomato2", arrow = arrow(length = unit(0.01, "npc"))) +
facet_wrap(~ cluster) +
theme(legend.position = "none")
ggplot() +
geom_segment(data = passes_to_plot, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "grey", arrow = arrow(length = unit(0.02, "npc"))) +
geom_segment(data = kmean_result, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "tomato2", arrow = arrow(length = unit(0.02, "npc"))) +
facet_wrap(~ cluster) +
theme(legend.position = "none")
library(broom)
passes_kmeans <- passes_ext %>%
mutate(vertical = PassEndX - location_x) %>%
mutate(horizontal = PassEndY - location_y) %>%
mutate(location_x = location_x - 50) %>%
mutate(location_y = location_y - 50) %>%
select(location_x, location_y, vertical, horizontal) %>%
head(1000)
kclust <- kmeans(passes_kmeans, centers = 5)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(passes_kmeans, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, passes_kmeans)
)
clusterings <- kclusts %>%
unnest(glanced)
ggplot(clusterings, aes(k, tot.withinss)) +
geom_line()
# kmean_result <- tidy(kclust) %>%
#   rename(location_x = x1, location_y = x2, angle = x3, length = x4) %>%
#   mutate(PassEndX = location_x + cos(angle*pi/180)*length) %>%
#   mutate(PassEndY = location_y + sin(angle*pi/180)*length)
kmean_result <- tidy(kclust) %>%
mutate(location_x = x1 + 50, location_y = x2 + 50) %>%
mutate(PassEndX = location_x + x3) %>%
mutate(PassEndY = location_y + x4)
passes_to_plot <- augment(kclust, passes_kmeans) %>%
mutate(cluster = .cluster) %>%
mutate(location_x = location_x + 50, location_y = location_y + 50) %>%
mutate(PassEndX = location_x + vertical) %>%
mutate(PassEndY = location_y + horizontal)
pitch <- create_opta_Pitch(data = passes_to_plot, grass_colour = "#F9F9F9", line_colour = "#8F8F8F", background_colour = "#F9F9F9", goal_colour = "#000000")
# kmean_result <- tidy(kclust) %>%
#   rename(location_x = x1, location_y = x2, angle = x3, length = x4) %>%
#   mutate(PassEndX = location_x + cos(angle*pi/180)*length) %>%
#   mutate(PassEndY = location_y + sin(angle*pi/180)*length)
kmean_result <- tidy(kclust) %>%
mutate(location_x = x1 + 50, location_y = x2 + 50) %>%
mutate(PassEndX = location_x + x3) %>%
mutate(PassEndY = location_y + x4)
passes_to_plot <- augment(kclust, passes_kmeans) %>%
mutate(cluster = .cluster) %>%
mutate(location_x = location_x + 50, location_y = location_y + 50) %>%
mutate(PassEndX = location_x + vertical) %>%
mutate(PassEndY = location_y + horizontal)
#pitch <- create_opta_Pitch(data = passes_to_plot, grass_colour = "#F9F9F9", line_colour = "#8F8F8F", background_colour = "#F9F9F9", goal_colour = "#000000")
ggplot() +
geom_segment(data = passes_to_plot, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "grey", arrow = arrow(length = unit(0.02, "npc"))) +
geom_segment(data = kmean_result, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "tomato2", arrow = arrow(length = unit(0.02, "npc"))) +
facet_wrap(~ cluster) +
theme(legend.position = "none")
View(kclusts)
View(kmean_result)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
passes <- tbl(con, "events") %>%
filter(playerId == "31772") %>%
filter(type_name == "Pass") %>%
filter(!(qualifiers %like% "%CornerTaken%")) %>%
filter(!(qualifiers %like% "%HeadPass%")) %>%
filter(!(qualifiers %like% "%FreekickTaken%")) %>%
filter(!(qualifiers %like% "%ThrowIn%")) %>%
filter(!(qualifiers %like% "%FreekickTaken%")) %>%
collect()
DBI::dbDisconnect(con)
passes <- passes %>%
mutate(PassEndX = as.numeric(PassEndX)) %>%
mutate(PassEndY = as.numeric(PassEndY))
match_ids <- unique(passes$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(match_id %in% match_ids) %>%
collect()
DBI::dbDisconnect(con)
View(matches)
assumed_length_of_pitch = 105
assumed_width_of_pitch = 68
x_mult = assumed_length_of_pitch/100
y_mult = assumed_width_of_pitch/100
matches <- matches %>%
select(match_id, season, league)
passes_ext <- left_join(passes, matches, by = c('match_id'))
passes_ext <- passes_ext %>%
mutate(switch = if_else(abs(PassEndY - location_y) > 50, TRUE, FALSE)) %>%
mutate(into_final_third = if_else(PassEndX > 100*2/3 & location_x <= 100*2/3, TRUE, FALSE)) %>%
mutate(into_box = if_else(PassEndX > 83 && (PassEndY > 21.1 && PassEndY < 78.9 ), TRUE, FALSE)) %>%
mutate(length = sqrt(((PassEndX - location_x)*x_mult)^2 + ((PassEndY - location_y)*y_mult)^2)) %>%
mutate(angle = (atan2((PassEndY - location_y)*y_mult, (PassEndX - location_x)*x_mult) * 180) / pi)
# passes %>%
#   mutate(switch = if_else(abs(PassEndY - location_y) > 50, 1, 0)) %>%
#   mutate(final_third = if_else(PassEndX > 100*2/3 & location_x <= 100*2/3, TRUE, FALSE)) %>%
#   mutate(key = if_else(grepl('KeyPass', qualifiers), TRUE, FALSE)) %>%
#   group_by(season) %>%
#   summarize(switch_ratio = mean(switch), final_third_ratio = mean(final_third), key_count = sum(key))
library(broom)
passes_kmeans <- passes_ext %>%
mutate(vertical = PassEndX - location_x) %>%
mutate(horizontal = PassEndY - location_y) %>%
mutate(location_x = location_x - 50) %>%
mutate(location_y = location_y - 50) %>%
select(location_x, location_y, vertical, horizontal) %>%
head(1000)
kclust <- kmeans(passes_kmeans, centers = 5)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(passes_kmeans, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, passes_kmeans)
)
clusterings <- kclusts %>%
unnest(glanced)
ggplot(clusterings, aes(k, tot.withinss)) +
geom_line()
# kmean_result <- tidy(kclust) %>%
#   rename(location_x = x1, location_y = x2, angle = x3, length = x4) %>%
#   mutate(PassEndX = location_x + cos(angle*pi/180)*length) %>%
#   mutate(PassEndY = location_y + sin(angle*pi/180)*length)
kmean_result <- tidy(kclust) %>%
mutate(location_x = x1 + 50, location_y = x2 + 50) %>%
mutate(PassEndX = location_x + x3) %>%
mutate(PassEndY = location_y + x4)
passes_to_plot <- augment(kclust, passes_kmeans) %>%
mutate(cluster = .cluster) %>%
mutate(location_x = location_x + 50, location_y = location_y + 50) %>%
mutate(PassEndX = location_x + vertical) %>%
mutate(PassEndY = location_y + horizontal)
#pitch <- create_opta_Pitch(data = passes_to_plot, grass_colour = "#F9F9F9", line_colour = "#8F8F8F", background_colour = "#F9F9F9", goal_colour = "#000000")
ggplot() +
geom_segment(data = passes_to_plot, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "grey", arrow = arrow(length = unit(0.02, "npc"))) +
geom_segment(data = kmean_result, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "tomato2", arrow = arrow(length = unit(0.02, "npc"))) +
facet_wrap(~ cluster) +
theme(legend.position = "none")
# Initialize parameters
num_zones_width <- 12 # Number of zones horizontally
num_zones_height <- 8 # Number of zones vertically
num_zones_tot <- num_zones_width*num_zones_height # Total number of zones
pitch_width <- 100 # As per Opta definition
pitch_height <- 100 # As per Opta definition
d3_pitch_width <- 840 # Pitch width for our d3 plot
d3_pitch_height <- 544 # Pitch height for our d3 plot
# Determine passing origin and destination zones
pass_areas <- passes %>%
mutate(location_y = 100 - location_y) %>% # Flip y-coordinate
mutate(PassEndY = 100 - PassEndY) %>% # Flip y-coordinate
mutate(area_origin_x = ceiling(location_x * num_zones_width / pitch_width)) %>%
mutate(area_origin_y = ceiling(location_y * num_zones_height / pitch_height)) %>%
mutate(area_origin = (area_origin_x - 1) * num_zones_height + area_origin_y) %>%
mutate(area_end_x = ceiling(PassEndX * num_zones_width / pitch_width)) %>%
mutate(area_end_y = ceiling(PassEndY * num_zones_height / pitch_height)) %>%
mutate(area_end = (area_end_x - 1) * num_zones_height + area_end_y) %>%
filter(area_origin <= num_zones_tot & area_end <= num_zones_tot)
# Tally up in which zones the passes originate
summary_origin <- pass_areas %>%
group_by(area_origin) %>%
summarize(n = n(), ratio_origin = n()/nrow(pass_areas))
# Add any zones for which we have no passing data. We of course intitialize them with 0.
missing_rows <- setdiff(seq(1, num_zones_tot), summary_origin$area_origin)
for(row in missing_rows){
summary_origin <- summary_origin %>%
add_row(area_origin = row, n = 0, ratio_origin = 0.0)
}
# Tally up in which zones the passes end
summary_end <- pass_areas %>%
group_by(area_origin, area_end) %>%
summarize(n_end = n()) %>%
ungroup()
# Add any zones for which we have no passing data. We of course intitialize them with 0.
missing_cols <- setdiff(seq(1, 96), summary_end$area_end)
for(col in missing_cols){
summary_end <- summary_end %>%
add_row(area_origin = 1, area_end = col, n_end = 0)
}
# Combine passing origin and destination information and format as wide dataframe
data <- summary_origin %>%
left_join(summary_end, by = c("area_origin")) %>%
mutate(ratio = n_end / n) %>%
select(area_origin, area_end, ratio) %>%
pivot_wider(id_cols = c("area_origin"), names_from = "area_end", values_from = "ratio") %>%
replace(is.na(.), 0)
# Add plotting information for d3 (rectangle locations, widths and heights)
data <- summary_origin %>%
left_join(data, by = c("area_origin")) %>%
select(-n) %>%
mutate(width = d3_pitch_width / num_zones_width,
height = d3_pitch_height / num_zones_height,
y1 = ((area_origin - 1) %% num_zones_height) * height,
x1 = floor((area_origin - 1) / num_zones_height) * width) %>%
arrange(area_origin)
r2d3(data = data, script = "../data/pass_transition.js", height = 584, width = 880)
angle_section = 15
passes_sonar <- passes_ext %>% mutate(angle_rounded = round(angle/angle_section)*angle_section)
passes_sonar <- passes_sonar %>% mutate(outcome_int = ifelse(outcome == "Successful", 1, 0))
passes_sonar <- passes_sonar %>%
filter(between(location_x, 100*1/3, 100*2/3))
sonar_data = passes_sonar %>%
mutate(N = n()) %>%
group_by(angle_rounded) %>%
mutate(n_angle = n() / N) %>%
ungroup() %>%
mutate(maxN = max(n_angle),
angle_norm = n_angle / maxN) %>%
group_by(angle_rounded, N) %>%
summarize(angle_norm = mean(angle_norm),
distance = mean(length),
completion = mean(outcome_int))
View(sonar_data)
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Passquote", "Passsonare", "completion")
View(sonar_data)
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Passquote", "Passsonare", "distance")
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Länge", "Passsonare", "distance")
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Durchschn. Länge", "Passsonare", "distance")
library(tidyverse)
library(dbplyr)
library(DBI)
library(r2d3) # Evaluate D3 directly from R
library(viridis)
source("../data/pitch_plots.r")
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
passes <- tbl(con, "events") %>%
filter(playerId == "74939") %>%
filter(type_name == "Pass") %>%
filter(!(qualifiers %like% "%CornerTaken%")) %>%
filter(!(qualifiers %like% "%HeadPass%")) %>%
filter(!(qualifiers %like% "%FreekickTaken%")) %>%
filter(!(qualifiers %like% "%ThrowIn%")) %>%
filter(!(qualifiers %like% "%FreekickTaken%")) %>%
collect()
DBI::dbDisconnect(con)
passes <- passes %>%
mutate(PassEndX = as.numeric(PassEndX)) %>%
mutate(PassEndY = as.numeric(PassEndY))
match_ids <- unique(passes$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(match_id %in% match_ids) %>%
collect()
DBI::dbDisconnect(con)
assumed_length_of_pitch = 105
assumed_width_of_pitch = 68
x_mult = assumed_length_of_pitch/100
y_mult = assumed_width_of_pitch/100
matches <- matches %>%
select(match_id, season, league)
passes_ext <- left_join(passes, matches, by = c('match_id'))
passes_ext <- passes_ext %>%
mutate(switch = if_else(abs(PassEndY - location_y) > 50, TRUE, FALSE)) %>%
mutate(into_final_third = if_else(PassEndX > 100*2/3 & location_x <= 100*2/3, TRUE, FALSE)) %>%
mutate(into_box = if_else(PassEndX > 83 && (PassEndY > 21.1 && PassEndY < 78.9 ), TRUE, FALSE)) %>%
mutate(length = sqrt(((PassEndX - location_x)*x_mult)^2 + ((PassEndY - location_y)*y_mult)^2)) %>%
mutate(angle = (atan2((PassEndY - location_y)*y_mult, (PassEndX - location_x)*x_mult) * 180) / pi)
# passes %>%
#   mutate(switch = if_else(abs(PassEndY - location_y) > 50, 1, 0)) %>%
#   mutate(final_third = if_else(PassEndX > 100*2/3 & location_x <= 100*2/3, TRUE, FALSE)) %>%
#   mutate(key = if_else(grepl('KeyPass', qualifiers), TRUE, FALSE)) %>%
#   group_by(season) %>%
#   summarize(switch_ratio = mean(switch), final_third_ratio = mean(final_third), key_count = sum(key))
library(broom)
passes_kmeans <- passes_ext %>%
mutate(vertical = PassEndX - location_x) %>%
mutate(horizontal = PassEndY - location_y) %>%
mutate(location_x = location_x - 50) %>%
mutate(location_y = location_y - 50) %>%
select(location_x, location_y, vertical, horizontal) %>%
head(1000)
kclust <- kmeans(passes_kmeans, centers = 5)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(passes_kmeans, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, passes_kmeans)
)
clusterings <- kclusts %>%
unnest(glanced)
ggplot(clusterings, aes(k, tot.withinss)) +
geom_line()
# kmean_result <- tidy(kclust) %>%
#   rename(location_x = x1, location_y = x2, angle = x3, length = x4) %>%
#   mutate(PassEndX = location_x + cos(angle*pi/180)*length) %>%
#   mutate(PassEndY = location_y + sin(angle*pi/180)*length)
kmean_result <- tidy(kclust) %>%
mutate(location_x = x1 + 50, location_y = x2 + 50) %>%
mutate(PassEndX = location_x + x3) %>%
mutate(PassEndY = location_y + x4)
passes_to_plot <- augment(kclust, passes_kmeans) %>%
mutate(cluster = .cluster) %>%
mutate(location_x = location_x + 50, location_y = location_y + 50) %>%
mutate(PassEndX = location_x + vertical) %>%
mutate(PassEndY = location_y + horizontal)
#pitch <- create_opta_Pitch(data = passes_to_plot, grass_colour = "#F9F9F9", line_colour = "#8F8F8F", background_colour = "#F9F9F9", goal_colour = "#000000")
ggplot() +
geom_segment(data = passes_to_plot, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "grey", arrow = arrow(length = unit(0.02, "npc"))) +
geom_segment(data = kmean_result, aes(x = location_x, y = location_y, xend = PassEndX, yend = PassEndY), color = "tomato2", arrow = arrow(length = unit(0.02, "npc"))) +
facet_wrap(~ cluster) +
theme(legend.position = "none")
# Initialize parameters
num_zones_width <- 12 # Number of zones horizontally
num_zones_height <- 8 # Number of zones vertically
num_zones_tot <- num_zones_width*num_zones_height # Total number of zones
pitch_width <- 100 # As per Opta definition
pitch_height <- 100 # As per Opta definition
d3_pitch_width <- 840 # Pitch width for our d3 plot
d3_pitch_height <- 544 # Pitch height for our d3 plot
# Determine passing origin and destination zones
pass_areas <- passes %>%
mutate(location_y = 100 - location_y) %>% # Flip y-coordinate
mutate(PassEndY = 100 - PassEndY) %>% # Flip y-coordinate
mutate(area_origin_x = ceiling(location_x * num_zones_width / pitch_width)) %>%
mutate(area_origin_y = ceiling(location_y * num_zones_height / pitch_height)) %>%
mutate(area_origin = (area_origin_x - 1) * num_zones_height + area_origin_y) %>%
mutate(area_end_x = ceiling(PassEndX * num_zones_width / pitch_width)) %>%
mutate(area_end_y = ceiling(PassEndY * num_zones_height / pitch_height)) %>%
mutate(area_end = (area_end_x - 1) * num_zones_height + area_end_y) %>%
filter(area_origin <= num_zones_tot & area_end <= num_zones_tot)
# Tally up in which zones the passes originate
summary_origin <- pass_areas %>%
group_by(area_origin) %>%
summarize(n = n(), ratio_origin = n()/nrow(pass_areas))
# Add any zones for which we have no passing data. We of course intitialize them with 0.
missing_rows <- setdiff(seq(1, num_zones_tot), summary_origin$area_origin)
for(row in missing_rows){
summary_origin <- summary_origin %>%
add_row(area_origin = row, n = 0, ratio_origin = 0.0)
}
# Tally up in which zones the passes end
summary_end <- pass_areas %>%
group_by(area_origin, area_end) %>%
summarize(n_end = n()) %>%
ungroup()
# Add any zones for which we have no passing data. We of course intitialize them with 0.
missing_cols <- setdiff(seq(1, 96), summary_end$area_end)
for(col in missing_cols){
summary_end <- summary_end %>%
add_row(area_origin = 1, area_end = col, n_end = 0)
}
# Combine passing origin and destination information and format as wide dataframe
data <- summary_origin %>%
left_join(summary_end, by = c("area_origin")) %>%
mutate(ratio = n_end / n) %>%
select(area_origin, area_end, ratio) %>%
pivot_wider(id_cols = c("area_origin"), names_from = "area_end", values_from = "ratio") %>%
replace(is.na(.), 0)
# Add plotting information for d3 (rectangle locations, widths and heights)
data <- summary_origin %>%
left_join(data, by = c("area_origin")) %>%
select(-n) %>%
mutate(width = d3_pitch_width / num_zones_width,
height = d3_pitch_height / num_zones_height,
y1 = ((area_origin - 1) %% num_zones_height) * height,
x1 = floor((area_origin - 1) / num_zones_height) * width) %>%
arrange(area_origin)
r2d3(data = data, script = "../data/pass_transition.js", height = 584, width = 880)
angle_section = 15
passes_sonar <- passes_ext %>% mutate(angle_rounded = round(angle/angle_section)*angle_section)
passes_sonar <- passes_sonar %>% mutate(outcome_int = ifelse(outcome == "Successful", 1, 0))
passes_sonar <- passes_sonar %>%
filter(between(location_x, 100*1/3, 100*2/3))
sonar_data = passes_sonar %>%
mutate(N = n()) %>%
group_by(angle_rounded) %>%
mutate(n_angle = n() / N) %>%
ungroup() %>%
mutate(maxN = max(n_angle),
angle_norm = n_angle / maxN) %>%
group_by(angle_rounded, N) %>%
summarize(angle_norm = mean(angle_norm),
distance = mean(length),
completion = mean(outcome_int))
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Durchschn. Länge", "Passsonare", "distance")
angle_section = 30
passes_sonar <- passes_ext %>% mutate(angle_rounded = round(angle/angle_section)*angle_section)
passes_sonar <- passes_sonar %>% mutate(outcome_int = ifelse(outcome == "Successful", 1, 0))
passes_sonar <- passes_sonar %>%
filter(between(location_x, 100*1/3, 100*2/3))
sonar_data = passes_sonar %>%
mutate(N = n()) %>%
group_by(angle_rounded) %>%
mutate(n_angle = n() / N) %>%
ungroup() %>%
mutate(maxN = max(n_angle),
angle_norm = n_angle / maxN) %>%
group_by(angle_rounded, N) %>%
summarize(angle_norm = mean(angle_norm),
distance = mean(length),
completion = mean(outcome_int))
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Durchschn. Länge", "Passsonare", "distance")
angle_section = 15
passes_sonar <- passes_ext %>% mutate(angle_rounded = round(angle/angle_section)*angle_section)
passes_sonar <- passes_sonar %>% mutate(outcome_int = ifelse(outcome == "Successful", 1, 0))
passes_sonar <- passes_sonar %>%
filter(between(location_x, 100*1/3, 100*2/3))
sonar_data = passes_sonar %>%
mutate(N = n()) %>%
group_by(angle_rounded) %>%
mutate(n_angle = n() / N) %>%
ungroup() %>%
mutate(maxN = max(n_angle),
angle_norm = n_angle / maxN) %>%
group_by(angle_rounded, N) %>%
summarize(angle_norm = mean(angle_norm),
distance = mean(length),
completion = mean(outcome_int))
sonar_plot <- function(df, legend_title, plot_title, fill_var){
fill_var <- sym(fill_var)
ggplot(df) +
geom_bar(aes(x = angle_rounded, y = angle_norm, fill = !!fill_var), stat = "identity") +
scale_y_continuous(limits = c(0,1)) +
coord_polar(start = pi/2, direction = -1) +
scale_fill_viridis(legend_title, na.value = "#FDE725FF") +
#labs(x = '', y = '', title = plot_title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
#legend.position = "bottom", #uncomment to remove colorbar
plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
}
sonar_plot(sonar_data, "Durchschn. Länge", "Passsonare", "distance")
